MMVERSION = 1.0.2
EXTRAFLAGS +=

ifndef	CC
CC := gcc
endif

ifndef	CFLAGS
	CFLAGS := -Wall -Wextra -Werror $(EXTRAFLAGS) 
endif

ifndef	TESTDIR
	TESTDIR := test
endif

ifndef	DEPDIRS
	DEPDIRS := ..
endif

ifndef	EXLIBS
	EXLIBS :=
endif

SHELL = /usr/bin/bash
LIBDIR = $(PWD)
MAKEFLAGS=	--no-print-directory


ifdef NAME
	LIBNAME := lib$(NAME).so
	LIBPATH := $(LIBDIR)/$(LIBNAME)
else
	LIBNAME := ""
	LIBPATH := ""
endif

_OBJ = $(_SRC:.c=.o)

N :='\033[0m'   	#'0;30' is NO COLOR's ANSI color code
R :='\033[1;31m'	#'0;31' is Red's ANSI color code
G :='\033[1;32m'	#'0;32' is Green's ANSI color code
Y :='\033[1;33m'	#'1;32' is Yellow's ANSI color code
B :='\033[1;34m'	#'0;34' is Blue's ANSI color code


.PHONY: all clean fclean re test update version test_update test_clean test_fclean libname lib listdep pwd libdir
.SILENT: listdep $(DEPS) listdep lib libname clean fclean $(_OBJ) version ready  deps pwd libdir $(TESTDIR)/test.sh

$(foreach dep ,$(DEPS), $(eval DEPSINC += -I $(shell cd $(DEPDIRS)/$($(dep)) && make pwd)))
$(foreach dep ,$(DEPS), $(eval DEPSLIBSPATH += $(shell cd $(DEPDIRS)/$($(dep)) && make libdir)))
$(foreach dep ,$(DEPS), $(eval DEPSLIBS += $(shell cd $(DEPDIRS)/$($(dep)) && make libname -s)))



all : deps $(LIBNAME)

$(LIBNAME): $(_OBJ) .gitignore
	
ifdef NAME
	$(CC) --shared -fPIC $(_OBJ) -o $@
endif

%.o: %.c $(_INC)
	echo -e $G$(MODULE_NAME)$N": Compiling: " $B$<$N
	$(CC)  $(CFLAGS) $(DEPSINC) -fPIC -I./ -c $<  -o $@
	echo -e $G$(MODULE_NAME)$N": Compiled : " $G$<$N

deps: $(DEPS) 

$(DEPS):
	ls $(DEPDIRS)/$($@) > /dev/null || (cd $(DEPDIRS)/ && git clone --recurse-submodules $($@LINK)) > /dev/null
	echo -en  $G
	echo -e $(MODULE_NAME) "-> "$($@)" :"$N
	cd $(DEPDIRS)/$($@) && make $(DEPCOM) EXTRAFLAGS="$(EXTRAFLAGS)"

.gitignore:
	echo >> $@ "*.o"
	echo >> $@ "*.so"
	echo >> $@ "*.a"
	echo >> $@ ".*.swp"
	echo >> $@ ".*.swo"
	echo >> $@ "$(TESTDIR)/run"
	echo >> $@ "$(TESTDIR)/*.o"
	echo >> $@ "$(TESTDIR)/*.out"
	echo >> $@ "$(TESTDIR)/*.err"
	echo >> $@ "$(TESTDIR)/*.wrn"
	echo >> $@ "$(TESTDIR)/*.log"
	echo >> $@ "$(TESTDIR)/*.so"
	echo >> $@ "$(TESTDIR)/*.a"
	echo >> $@ "$(TESTDIR)/.*.swp"
	echo >> $@ "$(TESTDIR)/.*.swo"


update:
	-git pull
	-$(foreach dep,$(DEPS), make update -C ../$($(dep));)

clean:
	-$(foreach dep,$(DEPS), make clean -C ../$($(dep));)
ifdef _SRC
	-rm -f $(_OBJ)
	echo -e $G'$(MODULE_NAME)'$N: 'Removed objects: ' $R$(_OBJ)$N
endif

fclean: clean
	-$(foreach dep,$(DEPS), make fclean -C ../$($(dep));)
ifdef NAME
	-rm -f $(LIBNAME)
	echo -e $G'$(MODULE_NAME)'$N: 'Removed LIB: ' $R$(LIBNAME)$N
endif

re: fclean all

lib:
ifdef NAME
	echo -l$(NAME)
else
	echo ""
endif

libname:
ifdef NAME
	echo $(LIBNAME)
else
	echo ""
endif

libdir:
ifdef NAME
	echo $(LIBPATH)
else
	echo ""
endif

listdep:
	echo -en $G
	for ((i = 1; i < $(MAKELEVEL); i++)); do printf '%s' "    "; done
	if (($(MAKELEVEL) > 0)); then printf '%s' "|--->"; fi
	echo -e $(MODULE_NAME) $N
	$(foreach dep ,$(DEPS), make listdep -C ../$($(dep));)

modulename:
	echo $(MODULE_NAME)

pwd:
	echo $(PWD)

#//////////////////////////////// TEST SECTION \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

test_all: ready all $(TESTDIR)/start_test.sh runtest

test: all $(TESTDIR)/start_test.sh runtest

ready:
	$(eval DEPCOM = test)

$(TESTDIR)/start_test.sh:
	-mkdir $(TESTDIR)
	echo -e >> $@ \
	"#!/bin/bash \n\
	TESTSRC="'$$(ls *.c)'"\n\
	echo \"test started...\"\n\
	for src in "'$$TESTSRC'"\n\
	do\n\
		"'rm "$$src".*'" 2>/dev/null ;\n\
		"'$$CC $$CFLAGS $$EXTRAFLAGS $$src -I ../ $$DEPSINC -Wl,--no-as-needed $$LIBPATH $$DEPSLIBSPATH -Wl,--as-needed $$EXLIBS -o $$src".out" 2>$$src".err"'"\n\
		if [ "'$$?'" -ne 0 ]; then\n\
			echo -e $R"'$$src'" Compile ERROR!$N\n\
		else\n\
			rm "'$$src".err"'";\n\
			"'./$$src".out" 2>$$src".err" 1>$$src".log" '"\n\
			RET="'$$?'"\n\
			if [ "'$$RET'" -eq 0 ]; then\n\
				echo -e $G"'$$src'" OK!$N\n\
			elif [ "'$$RET'" -eq 2 ]; then\n\
				echo -e $Y"'$$src'" WRN!$N\n\
			else\n\
				echo -e $R"'$$src'" FAIL!$N\n\
			fi\n\
		fi\n\
	done\n\
	echo \"test finished...\"\n\
	exit 0\n"
	-chmod +x $(TESTDIR)/start_test.sh
	echo -e >> $(TESTDIR)/test.c \
	"#include <stdio.h>\\n\
	int main(){\n\
		return (0);\n\
	}"

runtest:
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo Module: $(MODULE_NAME)
	@echo Path: $(shell pwd)
	@echo Dependencies: $(DEPSLIBS)
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	cd $(TESTDIR) &&\
		CC="$(CC)"\
		CFLAGS="$(CFLAGS)"\
		EXTRAFLAGS="$(EXTRAFLAGS)"\
		EXLIBS="$(EXLIBS)"\
		DEPSINC="$(DEPSINC)"\
		LIBPATH="$(LIBPATH)"\
		DEPSLIBSPATH="$(DEPSLIBSPATH)"\
		./start_test.sh
	@echo 	
	@echo -----------------------------------------------------------------------------------------------


#//////////////////////////////// TEST SECTION \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
version:
	echo $(MMVERSION)
